// <auto-generated />
using System;
using Linn.Authorisation.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Linn.Authorisation.Persistence.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20190523112732_first-thing")]
    partial class firstthing
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Linn.Authorisation.Domain.Groups.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Groups.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedByUri");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("GroupId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Members");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Member");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateGranted");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("GrantedByUri");

                    b.Property<int?>("PrivilegeId");

                    b.HasKey("Id");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("Permissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Permission");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Groups.GroupMember", b =>
                {
                    b.HasBaseType("Linn.Authorisation.Domain.Groups.Member");

                    b.Property<int?>("GroupId1");

                    b.HasIndex("GroupId1");

                    b.HasDiscriminator().HasValue("GroupMember");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Groups.IndividualMember", b =>
                {
                    b.HasBaseType("Linn.Authorisation.Domain.Groups.Member");

                    b.Property<string>("MemberUri");

                    b.HasDiscriminator().HasValue("IndividualMember");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Permissions.GroupPermission", b =>
                {
                    b.HasBaseType("Linn.Authorisation.Domain.Permissions.Permission");

                    b.Property<int?>("GranteeGroupId");

                    b.HasIndex("GranteeGroupId");

                    b.HasDiscriminator().HasValue("GroupPermission");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Permissions.IndividualPermission", b =>
                {
                    b.HasBaseType("Linn.Authorisation.Domain.Permissions.Permission");

                    b.Property<string>("GranteeUri");

                    b.HasDiscriminator().HasValue("IndividualPermission");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Groups.Member", b =>
                {
                    b.HasOne("Linn.Authorisation.Domain.Groups.Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Permissions.Permission", b =>
                {
                    b.HasOne("Linn.Authorisation.Domain.Privilege", "Privilege")
                        .WithMany()
                        .HasForeignKey("PrivilegeId");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Groups.GroupMember", b =>
                {
                    b.HasOne("Linn.Authorisation.Domain.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId1");
                });

            modelBuilder.Entity("Linn.Authorisation.Domain.Permissions.GroupPermission", b =>
                {
                    b.HasOne("Linn.Authorisation.Domain.Groups.Group", "GranteeGroup")
                        .WithMany()
                        .HasForeignKey("GranteeGroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
